#!/usr/bin/env python
"""
–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç 500 –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import os
import sys
import django
from django.conf import settings

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mental.settings')
django.setup()

from mental_app.models import Students, Class, TeacherProfile, User
from django.test import RequestFactory
from django.contrib.auth.models import AnonymousUser
from mental_app.views import student_create
from django.contrib.messages.storage.fallback import FallbackStorage
from django.contrib.messages import get_messages

def test_student_creation_in_class():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å (—Å class_id)"""
    print("=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∏—Ç–µ–ª–µ–π
        teachers = TeacherProfile.objects.filter(status='approved')
        if not teachers.exists():
            print("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return False
        
        teacher = teachers.first()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —É—á–∏—Ç–µ–ª—å: {teacher.user.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–æ–≤ —É —É—á–∏—Ç–µ–ª—è
        classes = Class.objects.filter(teacher=teacher)
        if not classes.exists():
            print("‚ùå –£ —É—á–∏—Ç–µ–ª—è –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤")
            return False
        
        class_obj = classes.first()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å: {class_obj.name}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        factory = RequestFactory()
        
        # –°–æ–∑–¥–∞–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–µ–Ω–∏–∫–∞
        post_data = {
            'name': '–¢–µ—Å—Ç–ö–ª–∞—Å—Å',
            'surname': '–£—á–µ–Ω–∏–∫–ö–ª–∞—Å—Å',
            'age': '12',
            'parent_first_name': '–¢–µ—Å—Ç',
            'parent_last_name': '–†–æ–¥–∏—Ç–µ–ª—å',
            'parent_phone_number': '+375291234567'
        }
        
        request = factory.post(f'/teacher/classes/{class_obj.id}/students/create/', post_data)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request.user = teacher.user
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        setattr(request, 'session', {})
        messages = FallbackStorage(request)
        setattr(request, '_messages', messages)
        
        print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å–µ {class_obj.id}")
        print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {post_data}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        response = student_create(request, class_id=class_obj.id)
        
        print(f"üì§ –û—Ç–≤–µ—Ç: {response}")
        
        if hasattr(response, 'status_code'):
            print(f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —É—á–µ–Ω–∏–∫
        try:
            student = Students.objects.get(
                name='–¢–µ—Å—Ç–ö–ª–∞—Å—Å',
                surname='–£—á–µ–Ω–∏–∫–ö–ª–∞—Å—Å',
                student_class=class_obj
            )
            print(f"‚úÖ –£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –∫–ª–∞—Å—Å–µ: {student}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
            student.delete()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
            
            return True
            
        except Students.DoesNotExist:
            print("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_student_creation_without_class():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –±–µ–∑ –∫–ª–∞—Å—Å–∞ (–±–µ–∑ class_id)"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –±–µ–∑ –∫–ª–∞—Å—Å–∞ ===")
    
    try:
        teachers = TeacherProfile.objects.filter(status='approved')
        if not teachers.exists():
            print("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return False
        
        teacher = teachers.first()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —É—á–∏—Ç–µ–ª—å: {teacher.user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        factory = RequestFactory()
        
        post_data = {
            'name': '–¢–µ—Å—Ç–ë–µ–∑–ö–ª–∞—Å—Å–∞',
            'surname': '–£—á–µ–Ω–∏–∫–ë–µ–∑–ö–ª–∞—Å—Å–∞',
            'age': '10',
            'parent_first_name': '–¢–µ—Å—Ç',
            'parent_last_name': '–†–æ–¥–∏—Ç–µ–ª—å',
            'parent_phone_number': '+375291234567'
        }
        
        request = factory.post('/teacher/students/create/', post_data)
        request.user = teacher.user
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        setattr(request, 'session', {})
        messages = FallbackStorage(request)
        setattr(request, '_messages', messages)
        
        print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –±–µ–∑ –∫–ª–∞—Å—Å–∞")
        print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {post_data}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        response = student_create(request, class_id=None)
        
        print(f"üì§ –û—Ç–≤–µ—Ç: {response}")
        
        if hasattr(response, 'status_code'):
            print(f"üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —É—á–µ–Ω–∏–∫
        try:
            student = Students.objects.get(
                name='–¢–µ—Å—Ç–ë–µ–∑–ö–ª–∞—Å—Å–∞',
                surname='–£—á–µ–Ω–∏–∫–ë–µ–∑–ö–ª–∞—Å—Å–∞'
            )
            print(f"‚úÖ –£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∫–ª–∞—Å—Å–∞: {student}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
            student.delete()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
            
            return True
            
        except Students.DoesNotExist:
            print("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}")
        return False

def test_models_integrity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π"""
    print("=== –¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        from mental_app.models import Students, Class, TeacherProfile
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã
        teacher_count = TeacherProfile.objects.count()
        class_count = Class.objects.count()
        student_count = Students.objects.count()
        
        print(f"‚úÖ –£—á–∏—Ç–µ–ª–µ–π –≤ –ë–î: {teacher_count}")
        print(f"‚úÖ –ö–ª–∞—Å—Å–æ–≤ –≤ –ë–î: {class_count}")
        print(f"‚úÖ –£—á–µ–Ω–∏–∫–æ–≤ –≤ –ë–î: {student_count}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        return False

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_database_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
    
    if not test_models_integrity():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—è–º–∏")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –±–µ–∑ –∫–ª–∞—Å—Å–∞
    success1 = test_student_creation_without_class()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å
    success2 = test_student_creation_in_class()
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ –∫–ª–∞—Å—Å–∞: {'–£–°–ü–ï–•' if success1 else '–û–®–ò–ë–ö–ê'}")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å: {'–£–°–ü–ï–•' if success2 else '–û–®–ò–ë–ö–ê'}")
    
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        if not success2:
            print("üîç –ü—Ä–æ–±–ª–µ–º–∞ –∏–º–µ–Ω–Ω–æ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å!")
    
    print("="*50)
